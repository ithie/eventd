{"version":3,"names":[],"mappings":"","sources":["observe.js"],"sourcesContent":["import {Event} from \"./event.js\";\n\nexport class Observe extends Event {\n\n  constructor(obj = {}) {\n    super();\n    let props = Object.keys(obj);\n    this._obj = {};\n    for (let attr of props) {\n      this._define(attr, obj[attr]);\n    }\n  }\n\n  on(event, handler) {\n    return super.on(event, handler);\n  }\n\n  trigger(event, ...data) {\n    super.trigger(event, ...data);\n  }\n\n  unset(attr) {\n    if (!this._obj.hasOwnProperty(attr)) {\n      return;\n    }\n\n    delete this_.obj[attr];\n\n    this.trigger('change', attr, undefined, 'removed');\n  }\n\n  set(attr, value) {\n    if (typeof attr === 'string') {\n      return this._setter(attr, value);  \n    }\n    if(typeof attr === 'object') {\n      for(let prop in attr) {\n        this._setter(prop, attr[prop]);\n      }\n    }\n  }\n\n  _define(attr, value) {\n    Object.defineProperty(this, attr, {\n      set: function(value) {\n        this._setter(attr, value);\n      }.bind(this),\n      get: function() {\n        return this._obj[attr];\n      }.bind(this)\n    });\n    this._obj[attr] = value;\n  }\n\n  _setter(attr, value) {\n    if (this._obj.hasOwnProperty(attr)) {\n      if(this._obj[attr] === value) {\n        return;\n      }\n      this._obj[attr] = value;\n    } else {\n      this._define(attr, value);\n    }\n    this.trigger(attr, value, 'set');\n    this.trigger('change', attr, value, 'set');\n  }\n}"],"file":"observe.js","sourceRoot":"/source/"}