{"version":3,"names":[],"mappings":"","sources":["event.js"],"sourcesContent":["export class Event {\n  constructor() {\n    this._events = {};\n  }\n\n  on() {\n    let args = Array.prototype.slice.call(arguments, 0),\n      event = args.shift(),\n      handle = args.shift();\n\n    this._events[event] = this._events[event] || [];\n    this._events[event].push(handle);\n    return handle;\n  }\n\n  once(event, handle) {\n    let _handle = this.on(event, function() {\n      this.off(event, _handle);\n      handle.apply(this, [].slice.call(arguments, 0));\n    }.bind(this));\n    return _handle;\n  }\n\n  off(event, handle) {\n    event = this._events[event];\n    if (!event) {\n      return;\n    }\n    var _handle = event.indexOf(handle);\n    if (!!~_handle) {\n      event.splice(_handle, 1);\n    }\n  }\n\n  trigger(event, ...data) {\n    if (this._events[event]) {\n      for (let e of this._events[event]) {\n        e.call(e, ...data);\n      }\n    }\n  }\n}"],"file":"event.js","sourceRoot":"/source/"}